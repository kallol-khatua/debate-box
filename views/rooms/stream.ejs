<!DOCTYPE html>

<html lang="en">

<head>

    <meta charset="UTF-8">

    <title>Debate-Box</title>
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link rel="stylesheet" href="/css/rooms/materialize.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/3.0.5/socket.io.js" integrity="sha512-2rUSTSAeOO02jF6eBqENNqPs1EohenJ5j+1dgDPdXSLz9nOlrr8DJk4zW/lDy8rjhGCSonW3Gx812XJQIKZKJQ==" crossorigin="anonymous"></script>
    <script src="https://code.jquery.com/jquery-3.5.1.min.js" integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="/css/rooms/style.css">


</head>

<body>
    <div class="main-wrap">
        <div class="call-wrap card" style="z-index: 99">
            <a id='meetingid' href="#" style="color: black;"></a>
            <div class="remote-video-wrap" id="remote-video" style="margin-bottom:0;background-color:rgb(131 131 131); display: flex;flex-wrap: wrap;">
                
                <div>
                    <div id="localUser" class="userbox remote-user div-center" style="flex-direction: column; height:100%;">
                        <h5 class="div-center"><%= currUser.username %>(You)</h5>
                        <div class="div-center">
                            <video autoplay id="localStream"></video>
                            <!-- <audio autoplay id="localStreamaudio" ></audio> -->
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="/js/rooms/materialize.min.js"></script>
    <script src="/js/rooms/client.js"></script>
    
    <script>
        let localUserVideo;
        let audioTrack;
        let mediaTrack;
        let socketId;
        let videoPlayer = document.getElementById("remote-video");
        let id = "<%= currUser._id %>";
        let meetingId = window.location.search;
        meetingId = meetingId.replace('?meetingId=', '');
        let roomName = meetingId;
        let peerVideo;
        let peerAudio;
        let peerConnection;
        var vStream = null;
        var aStream = null;

        var iceConfig = {
            iceServers: [
                {
                    urls: "stun:stun.services.mozilla.com"
                },
                {
                    urls: "stun:stun.l.google.com:19302"
                },
                {
                    urls: "stun:stun1.l.google.com:19302"
                },
                {
                    urls: "stun:stun2.l.google.com:19302"
                },
                {
                    urls: "stun:stun3.l.google.com:19302"
                },
                {
                    urls: "stun:stun4.l.google.com:19302"
                }
            ]
        }


        let socket = io({auth: { token: id, meetingId: meetingId}});
        
        socket.on("connect", () => {

            if(socket.id) { 
                socketId = socket.id              
                socket.emit("join", meetingId);
                localUserVideo = document.getElementById("localStream");
                processMedia();
            }

        })

        socket.emit("getConnectedUsers", meetingId);

        socket.on("connectedUser", (onlineUsers, host) => {

            let html = "";
            for(joineduser of onlineUsers){ 
                if(joineduser.memberId._id.toString() != id.toString()){
                    html += `
                    <div id="${joineduser.memberId._id}" class="remote-user other div-center-column"> 
                        <h5 class="div-center">${joineduser.memberId.username}</h5>
                        <div class="div-center">
                            <video autoplay id="video_${joineduser.memberId.socket_id}" class="peer-video"></video>
                            <audio autoplay id="audio_${joineduser.memberId.socket_id}" class="peer-audio"></audio>
                        </div>
                    </div>`
                }
            }

            videoPlayer.insertAdjacentHTML("afterbegin", html);
            if((host._id.toString() != id.toString()) && (host.meetingRoom == roomName)){
                html = `
                    <div id="${host._id}" class="remote-user other div-center-column"> 
                        <h5 class="div-center">${host.username}</h5>
                        <div class="div-center">
                            <video autoplay id="video_${host.socket_id}" class="peer-video"></video>
                            <audio autoplay id="audio_${host.socket_id}" class="peer-audio"></audio>
                        </div>
                    </div>`;
                videoPlayer.insertAdjacentHTML("afterbegin", html);
            }

        })

        socket.on('getOfflineUser', async (data) => {
            document.getElementById(data).remove();
        });

        socket.on('getOnlineUser', async (updatedUser) => {
            
            let html = `<div id=${updatedUser._id} class="remote-user other div-center-column"> 
                            <h5 class="div-center">${updatedUser.username}</h5>
                            <div class="div-center">
                                <video autoplay id="video_${updatedUser.socket_id}" class="peer-video"></video>
                                <audio autoplay id="audio_${updatedUser.socket_id}" class="peer-audio"></audio>
                            </div>
                        </div>`;

            videoPlayer.insertAdjacentHTML("afterbegin", html);

        });

                   
        socket.on("ready", async (socketId) => {
                peerConnection = new RTCPeerConnection(iceConfig);

                peerConnection.onicecandidate = (event) => {
                    if(event.candidate) {
                        socket.emit("candidate", event.candidate, roomName, socketId)
                    }
                };

                peerConnection.ontrack = (event) => {
                     
                        if(event.track.kind == "video"){
                            
                            peerVideo = document.getElementById(`video_${socketId}`);
                            
                            peerVideo.srcObject = event.streams[0];
                        }
                    
                        if(event.track.kind == "audio"){
                            
                            peerAudio = document.getElementById(`audio_${socketId}`);
                            
                            peerAudio.srcObject = event.streams[0];
                        }
                };

                peerConnection.addTrack(mediaTrack, vStream);
                peerConnection.addTrack(audioTrack, aStream);

                peerConnection.createOffer(
                    function(offer) {
                        peerConnection.setLocalDescription(offer);

                        socket.emit("offer", offer, roomName, socketId);
                    },
                    function (error) {
                        console.log(error);
                    }
                )
            
        })

        socket.on("candidate", async (candidate) => {
            
            var iceCandidate = new RTCIceCandidate(candidate);
            await peerConnection.addIceCandidate(iceCandidate);
        })

        socket.on("offer", (offer, socketId) => {
            
                peerConnection = new RTCPeerConnection(iceConfig);
                
                peerConnection.onicecandidate = peerConnection.onicecandidate = (event) => {
                    if(event.candidate) {
                
                        socket.emit("candidate", event.candidate, roomName, socketId)
                    }
                };

                peerConnection.ontrack = (event) => {
                    
                        if(event.track.kind == "video"){
                            
                            peerVideo = document.getElementById(`video_${socketId}`);
                            
                            peerVideo.srcObject = event.streams[0];
                        }
                    
                        if(event.track.kind == "audio"){
                            peerAudio = document.getElementById(`audio_${socketId}`);
                            peerAudio.srcObject = event.streams[0];
                        }
                };

                peerConnection.addTrack(mediaTrack, vStream);
                peerConnection.addTrack(audioTrack, aStream);
                peerConnection.setRemoteDescription(offer);
                peerConnection.createAnswer(
                    function(answer) {
                        peerConnection.setLocalDescription(answer);
                        socket.emit("answer", answer, roomName, socketId);
                    },
                    function (error) {
                        console.log(error);
                    }
                )
        })

        socket.on("answer", (answer, socketId) => {
            peerConnection.setRemoteDescription(answer);
        })

        
        // processing media data
        async function processMedia() {
            try{
                vStream = await navigator.mediaDevices.getUserMedia({
                    video: {
                        height: 480,
                        width: 750
                    },
                    audio: false
                })

                aStream = await navigator.mediaDevices.getUserMedia({
                    video: false,
                    audio: true
                })

                audioTrack = aStream.getAudioTracks()[0];
                audioTrack.enabled = true;
                
                mediaTrack = vStream.getVideoTracks()[0];
                localUserVideo.srcObject = new MediaStream([mediaTrack]);
                
                // ready to send media to other users in the room 
                socket.emit("ready", roomName, socketId);

            } catch (error) {
                console.log(error);
            }
        }

    </script>

</body>

</html>
